generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model likes {
  id      Int    @id @default(autoincrement())
  user_id Int?
  song_id Int?
  songs   songs? @relation(fields: [song_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "likes_song_id_fk")
  users   users? @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "likes_user_id_fk")
}

model listening_history {
  id          Int    @id @default(autoincrement())
  user_id     Int?
  song_id     Int?
  last_played Int?
  songs       songs? @relation(fields: [song_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "listening_history_song_id_fk")
  users       users? @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "listening_history_user_id_fk")
}

model song_artists {
  id                Int      @id
  song_id           Int?
  user_id           Int?
  verified          Boolean?
  ownership_percent Float?
  songs             songs?   @relation(fields: [song_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "song_artists_song_id_fk")
  users             users?   @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "song_artists_user_id_fk")
}

model songs {
  id                Int                 @id
  tape_id           Int?
  audio             String?             @db.VarChar
  cover             String?             @db.VarChar
  duration          Float?
  public            Boolean?
  track_name        String?             @db.VarChar
  type              String?             @db.VarChar
  submission_data   Json?
  cyanite_id        String?             @db.VarChar
  created           Int?
  total_likes       Int?
  track_data        Json?
  video             String?             @db.VarChar
  likes             likes[]
  listening_history listening_history[]
  song_artists      song_artists[]
}

model tape_sample_artists {
  id      Int    @id
  tape_id Int?
  user_id Int?
  tapes   tapes? @relation(fields: [tape_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "tape_sample_artists_tape_id_fk")
  users   users? @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "tape_sample_artists_user_id_fk")
}

model tapes {
  id                  Int                   @id
  contract            String?               @db.VarChar
  name                String?               @db.VarChar
  merkle_root         String?               @db.VarChar
  description         String?               @db.VarChar
  image               String?               @db.VarChar
  proposal_id         String?               @unique @db.VarChar
  video               String?               @db.VarChar
  bpm                 Int?
  timeline            Json?
  type                String?               @db.VarChar
  splits              String?               @db.VarChar
  links               Json?
  tape_sample_artists tape_sample_artists[]
}

model users {
  id                   Int                    @id @default(autoincrement())
  profile_picture      String?                @db.VarChar
  banner               String?                @db.VarChar
  twitter_handle       String?                @unique @db.VarChar
  badges               Json?
  description          String?
  display_name         String?                @unique @db.VarChar
  role                 user_role_type?
  wallet               String?                @unique @db.VarChar
  joined               Float?
  spotlight            String?                @db.VarChar
  collection           Json?
  email                String?                @unique @db.VarChar
  phone_number         String?                @unique @db.VarChar
  choices              choices[]
  event_comments       event_comments[]
  event_rsvps          event_rsvps[]
  event_waitlists      event_waitlists[]
  events               events[]
  likes                likes[]
  listening_history    listening_history[]
  proposals            proposals[]
  song_artists         song_artists[]
  space_authors        space_authors[]
  tape_sample_artists  tape_sample_artists[]
  votes                votes[]
  event_comments_likes event_comments_likes[]
}

model choices {
  id          Int
  proposal_id String    @db.VarChar(255)
  image       String?   @db.VarChar(255)
  artist      String?   @db.VarChar(255)
  name        String?   @db.VarChar(255)
  location    String?   @db.VarChar(255)
  media       String?   @db.VarChar(255)
  user_id     Int?
  proposals   proposals @relation(fields: [proposal_id], references: [ipfs_hash], onDelete: NoAction, onUpdate: NoAction, map: "choices_proposal_id_fk")
  users       users?    @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_choices_user_id")

  @@id([id, proposal_id])
}

model proposals {
  ipfs_hash    String         @id @db.VarChar(255)
  space_id     Int?
  signature    String?        @db.VarChar(255)
  author       Int?
  start_time   Int
  end_time     Int
  block        Int?
  method       String?        @db.VarChar
  title        String?
  description  String?
  scores       Float[]
  created_at   Int
  cover        String?        @db.VarChar
  choice_type  String?        @db.VarChar
  show_results Boolean?
  is_web3      Boolean?
  choices      choices[]
  users        users?         @relation(fields: [author], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "proposals_fk")
  spaces       spaces?        @relation(fields: [space_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "proposals_space_id_fk")
  strategies   strategies[]
  vote_choices vote_choices[]
  votes        votes[]
}

model spaces {
  id            Int             @id @default(autoincrement())
  name          String?         @unique @db.VarChar(255)
  image         String?         @db.VarChar
  description   String?         @db.VarChar
  banner        String?         @db.VarChar
  twitter       String?         @db.VarChar
  instagram     String?         @db.VarChar
  soundcloud    String?         @db.VarChar
  discord       String?         @db.VarChar
  created_at    BigInt?
  proposals     proposals[]
  space_authors space_authors[]
}

model strategies {
  id          Int        @id @default(autoincrement())
  proposal_id String?    @db.VarChar(255)
  name        String?    @db.VarChar(255)
  params      Json?
  network     Int?
  proposals   proposals? @relation(fields: [proposal_id], references: [ipfs_hash], onDelete: NoAction, onUpdate: NoAction, map: "strategies_proposal_id_fk")
}

model vote_choices {
  vote_id     Int
  choice_id   Int
  proposal_id String    @db.VarChar(255)
  amount      Int?
  proposals   proposals @relation(fields: [proposal_id], references: [ipfs_hash], onDelete: NoAction, onUpdate: NoAction, map: "fk_vote_choices_proposals")
  votes       votes?    @relation(fields: [vote_id], references: [id])

  @@id([vote_id, choice_id, proposal_id])
}

model votes {
  id                 Int            @id @default(autoincrement())
  signature          String?        @db.VarChar(255)
  created            DateTime?      @db.Timestamp(6)
  vp                 Int?
  voter              Int?
  users              users?         @relation(fields: [voter], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_votes_voter")
  vote_choices       vote_choices[]
  proposals          proposals?     @relation(fields: [proposal_ipfs_hash], references: [ipfs_hash])
  proposal_ipfs_hash String?        @db.VarChar(255)
}

model space_authors {
  user_id  Int?
  space_id Int?
  id       Int     @id @default(autoincrement())
  spaces   spaces? @relation(fields: [space_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "space_authors_space_id_fk")
  users    users?  @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "space_authors_user_id_fk")
}

model event_comments {
  id                   Int                    @id @default(autoincrement())
  event_id             Int
  user_id              Int
  comment              String
  created_at           Int?
  updated_at           Int?
  events               events                 @relation(fields: [event_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  users                users                  @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  event_comments_likes event_comments_likes[]
}

model event_comments_likes {
  id         Int             @id @default(autoincrement())
  user_id    Int
  comment_id Int
  users      users?          @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "event_comment_likes_user_id_fk")
  comment    event_comments? @relation(fields: [comment_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "event_comment_likes_comment_id_fk")
}

model event_rsvps {
  id         Int    @id @default(autoincrement())
  event_id   Int
  user_id    Int
  status     String @db.VarChar(50)
  created_at Int?
  updated_at Int?
  events     events @relation(fields: [event_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  users      users  @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model event_waitlists {
  id         Int    @id @default(autoincrement())
  event_id   Int
  user_id    Int
  position   Int
  created_at Int?
  updated_at Int?
  events     events @relation(fields: [event_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  users      users  @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model events {
  id              Int               @id @default(autoincrement())
  name            String            @db.VarChar(255)
  description     String?
  location        String            @db.VarChar(255)
  start_time      Int?
  end_time        Int?
  image           String?           @db.VarChar(255)
  user_id         Int
  created_at      Int?
  updated_at      Int?
  max_guests      Int?
  video           String           @db.VarChar(255)
  event_comments  event_comments[]
  event_rsvps     event_rsvps[]
  event_waitlists event_waitlists[]
  users           users             @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

enum user_role_type {
  user
  artist
  admin
}
