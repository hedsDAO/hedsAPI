generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model likes {
  id      Int    @id @default(autoincrement())
  user_id Int?
  song_id Int?
  songs   songs? @relation(fields: [song_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  users   users? @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model listening_history {
  id          Int       @id @default(autoincrement())
  user_id     Int?
  song_id     Int?
  last_played DateTime? @db.Timestamp(6)
  songs       songs?    @relation(fields: [song_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  users       users?    @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model song_artists {
  id                Int      @id @default(autoincrement())
  song_id           Int?
  user_id           Int?
  verified          Boolean?
  ownership_percent Float?
  songs             songs?   @relation(fields: [song_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  users             users?   @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model song_events {
  id              Int       @id @default(autoincrement())
  song_id         Int?
  user_id         Int?
  event_type      String?   @db.VarChar(255)
  event_data      Json?
  event_timestamp DateTime? @db.Timestamp(6)
  songs           songs?    @relation(fields: [song_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  users           users?    @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model songs {
  id                Int                 @id @default(autoincrement())
  tape_id           Int?
  audio             String?             @db.VarChar
  cover             String?             @db.VarChar
  duration          Float?
  public            Boolean?
  track_name        String?             @db.VarChar
  type              song_type?
  submission_data   Json?
  cyanite_id        String?             @db.VarChar
  created           DateTime?           @db.Timestamp(6)
  total_likes       Int?
  track_data        Json?
  video             String?             @db.VarChar
  likes             likes[]
  listening_history listening_history[]
  song_artists      song_artists[]
  song_events       song_events[]
}

model tape_events {
  id              Int       @id @default(autoincrement())
  tape_id         Int?
  user_id         Int?
  event_type      String?   @db.VarChar(255)
  event_data      Json?
  event_timestamp DateTime? @db.Timestamp(6)
  tapes           tapes?    @relation(fields: [tape_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  users           users?    @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model tape_sample_artists {
  id      Int    @id @default(autoincrement())
  tape_id Int?
  user_id Int?
  tapes   tapes? @relation(fields: [tape_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  users   users? @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model tapes {
  id                  Int                   @id @default(autoincrement())
  contract            String?               @db.VarChar
  name                String?               @db.VarChar
  merkle_root         String?               @db.VarChar
  description         String?               @db.VarChar
  image               String?               @db.VarChar
  proposal_id         String?               @db.VarChar
  video               String?               @db.VarChar
  bpm                 Int?
  timeline            Json?
  type                tape_type?
  splits              String?               @db.VarChar
  links               Json?
  tape_events         tape_events[]
  tape_sample_artists tape_sample_artists[]
}

model user_events {
  id              Int       @id @default(autoincrement())
  user_id         Int?
  event_type      String?   @db.VarChar(255)
  event_data      Json?
  event_timestamp DateTime? @db.Timestamp(6)
  users           users?    @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model user_generations {
  id           Int       @id @default(autoincrement())
  user_id      Int
  cyanite_id   Int
  audio        String
  image        String?
  prompt       String
  title        String
  status       String?
  cyanite_data Json?
  created_at   DateTime? @db.Timestamp(6)
}

model users {
  id                  Int                   @id @default(autoincrement())
  profile_picture     String?               @db.VarChar
  banner              String?               @db.VarChar
  twitter_handle      String?               @db.VarChar
  badges              Json?
  description         String?               @db.VarChar
  display_name        String?               @unique @db.VarChar
  role                user_role_type?
  wallet              String?               @unique @db.VarChar
  joined              Float?
  spotlight           String?               @db.VarChar
  collection          Json?
  email               String?               @db.VarChar
  phone_number        String?               @db.VarChar
  choices             choices[]
  likes               likes[]
  listening_history   listening_history[]
  proposals           proposals[]
  song_artists        song_artists[]
  song_events         song_events[]
  space_authors       space_authors[]
  tape_events         tape_events[]
  tape_sample_artists tape_sample_artists[]
  user_events         user_events[]
  votes               votes[]
}

model choices {
  id           Int
  proposal_id  String         @db.VarChar(255)
  image        String?        @db.VarChar(255)
  artist       String?        @db.VarChar(255)
  name         String?        @db.VarChar(255)
  location     String?        @db.VarChar(255)
  media        String?        @db.VarChar(255)
  user_id      Int?
  proposals    proposals      @relation(fields: [proposal_id], references: [ipfs_hash], onDelete: Cascade, onUpdate: NoAction)
  users        users?         @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_choices_user_id")
  vote_choices vote_choices[]

  @@id([id, proposal_id])
}

model proposals {
  ipfs_hash    String         @id @db.VarChar(255)
  space_id     Int?
  signature    String?        @db.VarChar(255)
  author       Int?
  start_time   DateTime?      @db.Timestamp(6)
  end_time     DateTime?      @db.Timestamp(6)
  block        Int?
  method       method_enum?
  title        String?
  description  String?
  scores       Float[]
  created_at   DateTime?      @db.Timestamp(6)
  cover        String?        @db.VarChar
  choice_type  String?        @db.VarChar
  show_results Boolean?
  is_web3      Boolean?
  choices      choices[]
  users        users?         @relation(fields: [author], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "proposals_fk")
  spaces       spaces?        @relation(fields: [space_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  strategies   strategies[]
  vote_choices vote_choices[]
  votes        votes[]
}

model spaces {
  id            Int             @id @default(autoincrement())
  name          String          @unique @db.VarChar(255)
  created_at    BigInt?         @db.BigInt
  image         String?         @db.VarChar
  description   String?         @db.VarChar
  banner        String?         @db.VarChar
  twitter       String?         @db.VarChar
  instagram     String?         @db.VarChar
  soundcloud    String?         @db.VarChar
  discord       String?         @db.VarChar
  proposals     proposals[]
  space_authors space_authors[]
}

model strategies {
  id          Int       @id @default(autoincrement())
  proposal_id String    @db.VarChar(255)
  name        String    @db.VarChar(255)
  params      Json?
  network     Int?
  proposals   proposals @relation(fields: [proposal_id], references: [ipfs_hash], onDelete: Cascade, onUpdate: NoAction)
}

model vote_choices {
  vote_id     Int
  choice_id   Int
  proposal_id String    @db.VarChar(255)
  amount      Int
  proposals   proposals @relation(fields: [proposal_id], references: [ipfs_hash], onDelete: Cascade, onUpdate: NoAction, map: "fk_vote_choices_proposals")
  choices     choices   @relation(fields: [choice_id, proposal_id], references: [id, proposal_id], onDelete: Cascade, onUpdate: NoAction)
  votes       votes     @relation(fields: [vote_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@id([vote_id, choice_id, proposal_id])
}

model votes {
  id                 Int            @id @default(autoincrement())
  signature          String         @db.VarChar(255)
  created            DateTime       @db.Timestamp(6)
  vp                 Int
  voter              Int
  vote_choices       vote_choices[]
  users              users          @relation(fields: [voter], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_votes_voter")
  proposals          proposals?     @relation(fields: [proposalsIpfs_hash], references: [ipfs_hash])
  proposalsIpfs_hash String?        @db.VarChar(255)
}

model space_authors {
  user_id  Int
  space_id Int
  id       Int    @default(autoincrement())
  spaces   spaces @relation(fields: [space_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  users    users  @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@id([user_id, space_id])
}

enum song_type {
  submission
  track
  collab
  sample
  devolo
}

enum tape_market_type {
  opensea
  sound
}

enum tape_type {
  legacy
  devtape
  collabtape
}

enum user_role_type {
  user
  artist
  admin
}

enum method_enum {
  linear
  quadratic
  single_choice @map("single choice")
}

enum state_enum {
  pending
  open
  closed
}
